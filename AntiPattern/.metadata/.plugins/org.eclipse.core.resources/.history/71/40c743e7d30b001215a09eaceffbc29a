package br.ufes.inf.nemo.ontouml.antipattern;

import java.util.Collection;
import RefOntoUML.Relator;

public class RBOSIdentifier {
	
	public static String OCLQuery = "Association.allInstances()->select(x:Association | x.ownedEnd.type->isUnique(name) and  x.ownedEnd.type->forAll(y1,y2:Type | y1.oclAsType(Classifier).allParents()->intersection(y2.oclAsType(Classifier).allParents())->intersection(Kind.allInstances().oclAsType(Class)->union(Collective.allInstances().oclAsType(Class))->union(Quantity.allInstances().oclAsType(Class)))->size()>0 ) and GeneralizationSet.allInstances()->select(gs:GeneralizationSet | gs.generalization->exists(y1,y2:Generalization | y1<>y2 and Classifier.allInstances()->select(z1:Classifier | z1.allParents()->includes(y1.specific))->including(y1.specific)->includes(x.ownedEnd.type->at(1)) and Classifier.allInstances()->select(z2:Classifier | z2.allParents()->includes(y2.specific))->including(y2.specific)->includes(x.ownedEnd.type->at(2))) )->forAll(chosen_gs:GeneralizationSet | chosen_gs.isDisjoint=false))";
	public static String OCLQueryRelator = "Relator.allInstances()->select(r:Relator | (r.mediations()->size()>2 or (r.mediations()->size()=2 and (r.mediations()->at(1).mediatedEnd().lower>1 or r.mediations()->at(2).mediatedEnd().lower>1) ) )	and r.mediated()->exists(t1,t2:Classifier |	t1<>t2	and	t1.allParents()->intersection(t2.allParents())->intersection(SubstanceSortal.allInstances())->size()>0 and GeneralizationSet.allInstances()->select(gs:GeneralizationSet |  gs.generalization->exists(g1,g2:Generalization | g1<>g2 and (g1.specific.allChildren()->includes(t1) or g1.specific=t1) and (g2.specific.allChildren()->includes(t2) or g2.specific=t2)))->forAll(chosenGS:GeneralizationSet | chosenGS.isDisjoint=false)))";

	public static Collection<Relator> RBOSRelator ()
	{
		
	}
}
