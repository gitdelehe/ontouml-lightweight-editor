#summary Learn how to use the OntoUML infrastructure dynamically (via code)
#labels OntoUML,Infrastructure

<g:plusone size="medium"></g:plusone>

==OntoUML Infrastructure==

OLED uses an infrastructure which was former developed by Roberto Carrareto, latter enhanced by Antognoni Albuquerque and now constantly improved by us. This means that you can sort of "integrate" your project with OLED using this infrastructure to create your models.

To use the infrastruture you will need of the following Eclipse libraries in your project: 

  * lpg.runtime.java
  * org.eclipse.emf.common
  * org.eclipse.emf.ecore.xmi
  * org.eclipse.emf.ecore
  * org.eclipse.ocl
  * org.eclipse.ocl.ecore

We recommend using *Juno* or *Kepler* versions of these libraries because we actually develop OLED in these versions. Besides these Eclipse libraries, you will of course need of our OntoUML infrastructure, which can be found at: trunk/br.ufes.inf.nemo.common/lib/refontouml/

  * br.ufes.inf.nemo.ontouml_1.0.0.201409231448.jar

If you are not familiar with UML2 project of Eclipse, since OntoUML is a version of the Unified Modeling Language, it should be a great help to know how to create dynamically UML models via code using the Eclipse-based implementation of UML. There is a tutorial for that according to each eclipse version:

  * [http://wiki.eclipse.org/MDT/UML2/Getting_Started_with_UML2 Getting Started with UML2 (Luna 2014)]
  * [http://www.eclipse.org/modeling/mdt/uml2/docs/articles/Getting_Started_with_UML2/article.html Getting Started with UML2 (Ganymede 2008)]

{{{
//Loading...
String refontoumlpath = "C:\\Users\\Guerson\\example.refontouml";
Resource resource = RefOntoUMLResourceUtil.loadModel(refontoumlpath);
RefOntoUML.Package root = resource.getContents().get(0);
}}}

{{{
//Saving...
RefOntoUMLResourceUtil.saveModel(refontoumlpath, root);
}}}

----
*Importing an OntoUML model into OLED*
----

  # Go to: File -> Import -> Ecore Instance (based on Reference Metamodel)
  # Choose the refontouml file and press Ok.

----
*Creating an OntoUML model Dinamycally*
----

_Coming soon..._